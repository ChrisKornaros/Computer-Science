{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# CS50p Notes by Unit\n",
        "## Unit 0: Functions and Variables\n",
        ":::{}\n",
        "- My local Computer_Science repo now has a specific branch for CS50p\n",
        "\n",
        "```{zsh}\n",
        "git checkout cs50p\n",
        "git add .\n",
        "git commit -m \"Saving recent work for CS50p.\"\n",
        "git checkout main\n",
        "git merge --no-ff cs50p main\n",
        "git push\n",
        "```\n",
        "\n",
        "- Quarto is used from the command line, the .qmd file uses markdown syntax\n",
        "\n",
        "```{md}\n",
        ":::{}\n",
        "- This creates a list\n",
        "- Add various items\n",
        "- Also knows whether to continue with your symbol\n",
        ":::\n",
        ":::{}\n",
        "1. Create a numbered one\n",
        "2. That even has subnumbers on an indent\n",
        ":::\n",
        "- To add a block of code, ```followed by the code block and then```\n",
        "-  \n",
        "```\n",
        "\n",
        "> Blockquote start \n",
        "> \n",
        "> More text\n",
        "\n",
        "```\n",
        "> Same pattern\n",
        "> \n",
        "> As above\n",
        "```\n",
        ":::\n",
        ":::{.callout-note}\n",
        "For more markdown tips, docs, and shortcuts <https://quarto.org/docs/authoring/markdown-basics.html>\n",
        ":::\n",
        "\n",
        "### Lecture 0\n",
        "#### Integers or `int`\n",
        ":::{}\n",
        "* F-string formatting is a way to embed variables in strings, simply use ```print(f\"There are, {count} apples.\")```\n",
        "* In python an integer is referred to as an `int` \n",
        "* It's easy to interact with `int` variables natively in Python\n",
        "```\n",
        "x = 1\n",
        "y = 2\n",
        "\n",
        "z = x + y\n",
        "\n",
        "print(z)\n",
        "```\n",
        "* You can improve upon the above program by using base Python functions\n",
        "```\n",
        "x = int(input(\"What's x? \"))\n",
        "y = int(input(\"What's y? \"))\n",
        "\n",
        "print(x + y)\n",
        "```\n",
        ":::\n",
        "#### Floats\n",
        ":::{}\n",
        "* A floating point value is a real number with a decimal, like `0.52`\n",
        "* Modifying the previous code to use the `float` data type allows you to perform operations on decimals too\n",
        "* When dealing with decimals, you may want or need to round the values\n",
        "* You can tie everything together with the following code, which rounds the sum to 2 decimal places\n",
        "  * Additionally, ```print(f\"{z:,}\")``` prints the variable `z` and adds a comma to the value\n",
        "```\n",
        "# Get the user's input\n",
        "x = float(input(\"What's x? \"))\n",
        "y = float(input(\"What's y? \"))\n",
        "\n",
        "# Create a rounded result\n",
        "z = round(x + y, 2)\n",
        "\n",
        "# Print the formatted result\n",
        "print(f\"{z:,}\")\n",
        "```\n",
        "* Finally, you could remove the piece of code that rounds the values with f-string formatting\n",
        "```\n",
        "# Get the user's input\n",
        "x = float(input(\"What's x? \"))\n",
        "y = float(input(\"What's y? \"))\n",
        "\n",
        "# Calculate the result\n",
        "z = x / y\n",
        "\n",
        "# Print the result\n",
        "print(f\"{z:.2f}\")\n",
        "```\n",
        ":::\n",
        "#### Def\n",
        ":::{}\n",
        "* Use the `def` keyword to initialize a UDF (user-defined function)\n",
        "* Follow this with the function name, parentheses, and then any conditions in the parentheses\n",
        "```\n",
        "def hello():\n",
        "    print(\"hello\")\n",
        "\n",
        "\n",
        "name = input(\"What's your name? \")\n",
        "hello()\n",
        "print(name)\n",
        "```\n",
        "* Notice how everything is indented under def, Python uses indentation to understand what's part of the function\n",
        ":::"
      ],
      "id": "18577877"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}